name: Running Test Script
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DAPPER_HOST_ARCH: amd64
      CATTLE_HELM_VERSION: v2.16.8-rancher2
      CATTLE_MACHINE_VERSION: v0.15.0-rancher112
      CATTLE_K3S_VERSION: v1.28.6+k3s2
      HELM_VERSION: v3.13.3
      KUSTOMIZE_VERSION: v5.0.1
      HELM_UNITTEST_VERSION: 0.3.2
      K3D_VERSION: v5.4.6
      CATTLE_KDM_BRANCH: dev-v2.8
      CONTROLLER_GEN_VERSION: v0.12.0
      YQ_VERSION: v4.40.2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io containerd
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      - name: Configure git
        run: git config --global --add safe.directory /github/workspace

      - name: Install Rancher Machine
        run: curl -sLf https://github.com/rancher/machine/releases/download/${{ env.CATTLE_MACHINE_VERSION }}/rancher-machine-${{ env.DAPPER_HOST_ARCH }}.tar.gz | sudo tar xvzf - -C /usr/bin

      - name: Install k3d
        run: |
          if [ "${{ env.DAPPER_HOST_ARCH }}" != "s390x" ]; then
            curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=${{ env.K3D_VERSION }} bash
          fi

      - name: Install golangci-lint and spectrometer
        if: ${{ env.DAPPER_HOST_ARCH == 'amd64' }}
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.54.2
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/spectrometer/master/install.sh | sh

      - name: Install controller-gen
        run: go install sigs.k8s.io/controller-tools/cmd/controller-gen@${{ env.CONTROLLER_GEN_VERSION }}

      - name: Install yq
        run: |
          wget -q https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_${{ env.DAPPER_HOST_ARCH }}.tar.gz -O - | tar xz
          sudo mv yq_linux_${{ env.DAPPER_HOST_ARCH }} /usr/bin/yq

      ## Helm Setup start
      - name: Uninstall Helm
        run: |
          sudo rm -rf /usr/local/bin/helm /usr/bin/rancher-helm /usr/bin/rancher-tiller ~/.helm /usr/local/bin/helm_v3 /usr/local/bin/tiller

      - name: Set Helm 2 URL
        run: echo "HELM_URL_V2=https://github.com/rancher/helm/releases/download/${{ env.CATTLE_HELM_VERSION }}/rancher-helm" >> $GITHUB_ENV

      - name: Set Tiller URL
        run: echo "TILLER_URL=https://github.com/rancher/helm/releases/download/${{ env.CATTLE_HELM_VERSION }}/rancher-tiller" >> $GITHUB_ENV

      - name: Download Rancher Helm
        run: sudo curl -sLf ${{ env.HELM_URL_V2 }} -o /usr/bin/rancher-helm-v2

      - name: Download Rancher Tiller
        run: sudo curl -sLf ${{ env.TILLER_URL }} -o /usr/bin/rancher-tiller

      - name: Set permissions for Helm and Tiller
        run: sudo chmod +x /usr/bin/rancher-helm-v2 /usr/bin/rancher-tiller

      - name: Create symlink for Helm
        run: sudo ln -s /usr/bin/rancher-helm-v2 /usr/bin/helm

      - name: Create symlink for Tiller
        run: sudo ln -s /usr/bin/rancher-tiller /usr/bin/tiller

      - name: Initialize Helm
        run: helm init -c --stable-repo-url https://charts.helm.sh/stable/

      - name: Set Helm 3 URL
        run: echo "HELM_URL_V3=https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-${{ env.DAPPER_HOST_ARCH }}.tar.gz" >> $GITHUB_ENV

      - name: Create temporary directory for Helm 3
        run: sudo mkdir /usr/tmp

      - name: Download and extract Helm 3
        run: curl ${{ env.HELM_URL_V3 }} | sudo tar xvzf - --strip-components=1 -C /usr/tmp/

      - name: Move Helm 3 binary
        run: sudo mv /usr/tmp/helm /usr/bin/helm_v3

      ## Helm Setup end

      - name: Install kustomize
        run: |
          KUSTOMIZE_URL=https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/${{ env.KUSTOMIZE_VERSION }}/kustomize_${{ env.KUSTOMIZE_VERSION }}_linux_${{ env.DAPPER_HOST_ARCH }}.tar.gz
          curl -sLf ${KUSTOMIZE_URL} | sudo tar -xzf - -C /usr/bin
          sudo chmod +x /usr/bin/kustomize

      - name: Copy Rancher binaries from k3s image
        run: |
          docker run --rm --entrypoint "" -v /usr/bin:/host-bin rancher/k3s:${{ env.CATTLE_K3S_VERSION }} sh -c "cp /bin/{blkid,bandwidth,cni,conntrack,containerd,containerd-shim-runc-v2,ethtool,firewall,ip,ipset,k3s,losetup,pigz,runc,which,aux/xtables-legacy-multi} /host-bin"
          sudo ln -s /usr/bin/cni /usr/bin/bridge
          sudo ln -s /usr/bin/cni /usr/bin/flannel
          sudo ln -s /usr/bin/cni /usr/bin/host-local
          sudo ln -s /usr/bin/cni /usr/bin/loopback
          sudo ln -s /usr/bin/cni /usr/bin/portmap
          sudo ln -s /usr/bin/k3s /usr/bin/crictl
          sudo ln -s /usr/bin/k3s /usr/bin/ctr
          sudo ln -s /usr/bin/k3s /usr/bin/k3s-agent
          sudo ln -s /usr/bin/k3s /usr/bin/k3s-etcd-snapshot
          sudo ln -s /usr/bin/k3s /usr/bin/k3s-server
          sudo ln -s /usr/bin/k3s /usr/bin/kubectl
          sudo ln -s /usr/bin/pigz /usr/bin/unpigz
          sudo ln -s /usr/bin/xtables-legacy-multi /usr/bin/iptables
          sudo ln -s /usr/bin/xtables-legacy-multi /usr/bin/iptables-save
          sudo ln -s /usr/bin/xtables-legacy-multi /usr/bin/iptables-restore
          sudo ln -s /usr/bin/xtables-legacy-multi /usr/bin/iptables-translate
          sudo ln -s /usr/bin/xtables-legacy-multi /usr/bin/ip6tables
          sudo ln -s /usr/bin/xtables-legacy-multi /usr/bin/ip6tables-save
          sudo ln -s /usr/bin/xtables-legacy-multi /usr/bin/ip6tables-restore
          sudo ln -s /usr/bin/xtables-legacy-multi /usr/bin/ip6tables-translate
          sudo mkdir -p /go/src/github.com/rancher/rancher/.kube
          sudo ln -s /etc/rancher/k3s/k3s.yaml /go/src/github.com/rancher/rancher/.kube/k3s.yaml

      - name: Install k3s images
        run: curl -sLf https://github.com/rancher/k3s/releases/download/${{ env.CATTLE_K3S_VERSION }}/k3s-images.txt -o /usr/tmp/k3s-images.txt

      - name: Install Python and dependencies
        run: |
          sudo apt-get install -y python3-pip python3-dev python3-tox libffi-dev libssl-dev
          sudo pip3 install --upgrade pip

      - name: Copy Rancher binary from official Rancher image
        run: docker create --name rancher-container rancher/rancher:v2.8-head && docker cp rancher-container:/usr/bin/rancher ./bin/rancher && docker rm rancher-container

      - name: Run tests
        run: ./scripts/entry ci
#env:
  #K3S_VERSION: v1.30.1+k3s1
  #

#jobs:
  #container-test-job:
    #runs-on: ubuntu-latest
    #container:
      #image: rancher/dapper:v0.6.0
    #steps:
      #- name: Checkout code
        #uses: actions/checkout@v4

      ##- name: Download Rancher Binary
        ##uses: actions/download-artifact@v4
        ##with:
          ##name: rancher
          ##path: ./bin
          ##run-id: 9410755745
          ##github-token: ${{ secrets.GITHUB_TOKEN }}

      ##- name: Make Rancher Binary Executable
        ##run: chmod +x bin/rancher

      ##- name: Verify Rancher Binary
        ##run: ls -l bin/rancher

      #- name: Build Dapper Image
        #run: dapper -f Dockerfile.dapper -d ci

  ##build-server:
    ##name: Build rancher server
    ##runs-on: ubuntu-latest
    ##steps:
      ##- name: Checkout code
        ##uses: actions/checkout@v4

      ##- name: Set Up Go
        ##uses: actions/setup-go@v5
        ##with:
          ##go-version: '1.21'

      ##- name: Install Dependencies
        ##run: |
          ##sudo apt-get update
          ##sudo apt-get install -y jq curl
        ##shell: bash

      ##- name: Run Build Server
        ##run: |
          ##./scripts/build-server
        ##shell: bash

      ##- name: Upload Rancher Binary
        ##uses: actions/upload-artifact@v4
        ##with:
          ##name: rancher
          ##path: bin/rancher

  #integration-testing:
    #name: Integration tests
    #runs-on: ubuntu-latest
    ##needs:
      ##- build-server
    #steps:
      #- name: Checkout code
        #uses: actions/checkout@v4

      #- name: Download Rancher Binary
        #uses: actions/download-artifact@v4
        #with:
          #name: rancher
          #path: bin
          #run-id: 9410755745
          #github-token: ${{ secrets.GITHUB_TOKEN }}

      #- name: Make Rancher Binary Executable
        #run: chmod +x ./bin/rancher
        #shell: bash

      #- name: Download and Install k3s
        #run: |
          #curl -L -o k3s "https://github.com/k3s-io/k3s/releases/download/${{ env.K3S_VERSION }}/k3s"
          #chmod +x k3s
          #sudo mv k3s /usr/local/bin/
        #shell: bash

      #- name: Stop Existing k3s Service
        #run: |
          #sudo systemctl stop k3s || true
          #sudo pkill -f k3s || true
          #sudo rm -rf /etc/rancher/k3s /var/lib/rancher/k3s
        #shell: bash

      #- name: Verify k3s Installation and Start k3s
        #run: |
          #k3s --version
          #sudo k3s server --https-listen-port 6443 --write-kubeconfig-mode=644 &
          #sleep 30
          #k3s kubectl get nodes
        #shell: bash

      #- name: Run Integration Tests
        #run: |
          #sudo ./scripts/test || (
            #cat /tmp/rancher.log &&
            #echo "Checking k3s logs..." &&
            #(sudo cat /var/log/k3s.log || sudo cat /var/lib/rancher/k3s/server/logs/k3s.log || echo "k3s logs not found") &&
            #false
          #)
        #shell: bash
        #env:
          #ARCH: amd64
          #CI: true
          #AGENT_TAG: latest
          #CATTLE_SYSTEM_AGENT_VERSION: v0.3.6

      #- name: Upload Rancher Logs
        #if: failure()
        #uses: actions/upload-artifact@v4
        #with:
          #name: rancher-logs
          #path: /tmp/rancher.log
